<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BGD、SGD和MBGD的一些区别</title>
    <url>/2017/09/12/BGD%E3%80%81SGD%E5%92%8CMBGD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>本文主要讲解了 梯度下降(Batch gradient descent)，随机梯度下降(Stochastic gradient descent)，小批量梯度下降(Mini-batch gradient descent)在实现上的区别</p>
<a id="more"></a>


<h3 id="梯度下降-Batch-gradient-descent-–BGD"><a href="#梯度下降-Batch-gradient-descent-–BGD" class="headerlink" title="梯度下降(Batch gradient descent)–BGD"></a>梯度下降(Batch gradient descent)–BGD</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 梯度下降(Batch gradient descent)--BGD</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_gradient_descent</span>(<span class="params">x, y, learn_rate, epoches</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x:  输入的x</span></span><br><span class="line"><span class="string">    :param y:  输入的y</span></span><br><span class="line"><span class="string">    :param learn_rate: 学习率</span></span><br><span class="line"><span class="string">    :param epoches: 迭代次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    theta = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoches):</span><br><span class="line">        loss = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">        <span class="comment"># 全部的值带入，计算 梯度</span></span><br><span class="line">        m = len(y)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            loss[<span class="number">0</span>] = loss[<span class="number">0</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) * x[j, <span class="number">0</span>] / m</span><br><span class="line">            loss[<span class="number">1</span>] = loss[<span class="number">1</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) / m</span><br><span class="line">        <span class="comment"># 更新 theta</span></span><br><span class="line">        theta[<span class="number">0</span>] = theta[<span class="number">0</span>] - learn_rate * loss[<span class="number">0</span>]</span><br><span class="line">        theta[<span class="number">1</span>] = theta[<span class="number">1</span>] - learn_rate * loss[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure>





<h3 id="随机梯度下降-Stochastic-gradient-descent-–SGD"><a href="#随机梯度下降-Stochastic-gradient-descent-–SGD" class="headerlink" title="随机梯度下降(Stochastic gradient descent)–SGD"></a>随机梯度下降(Stochastic gradient descent)–SGD</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这不是随机梯度，随机梯度是每迭代一次，数据就随机一次---但是这也是一种处理手段</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stochastic_gradient_descent_false</span>(<span class="params">x, y, learn_rate, epoches, stochastic_rate</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 输入的x</span></span><br><span class="line"><span class="string">    :param y: 输入的y</span></span><br><span class="line"><span class="string">    :param learn_rate: 学习率</span></span><br><span class="line"><span class="string">    :param epoches: 迭代次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    shufflle_data = np.column_stack((y, x))</span><br><span class="line">    np.random.shuffle(shufflle_data)</span><br><span class="line">    stochastic_count = int(len(y) * stochastic_rate)</span><br><span class="line">    <span class="comment"># 然后随机取一些数据进行梯度优化， 比如取随机100条数据</span></span><br><span class="line">    y = shufflle_data[:stochastic_count, <span class="number">0</span>]</span><br><span class="line">    x = shufflle_data[:stochastic_count, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> batch_gradient_descent(x, y, learn_rate, epoches)</span><br><span class="line"><span class="comment"># 正确的随机梯度应该是这样</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stochastic_gradient_descent_true</span>(<span class="params">x, y, learn_rate, epoches, stochastic_rate</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 输入的x</span></span><br><span class="line"><span class="string">    :param y: 输入的y</span></span><br><span class="line"><span class="string">    :param learn_rate: 学习率</span></span><br><span class="line"><span class="string">    :param epoches: 迭代次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    theta = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoches):</span><br><span class="line">        shufflle_data = np.column_stack((y, x))</span><br><span class="line">        np.random.shuffle(shufflle_data)</span><br><span class="line">        stochastic_count = int(len(y) * stochastic_rate)</span><br><span class="line">        <span class="comment"># 然后随机取一些数据进行梯度优化， 比如取随机100条数据</span></span><br><span class="line">        y = shufflle_data[:stochastic_count, <span class="number">0</span>]</span><br><span class="line">        x = shufflle_data[:stochastic_count, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">        <span class="comment"># 随机之后的值，进行梯度计算</span></span><br><span class="line">        loss = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">        m = len(y)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            loss[<span class="number">0</span>] = loss[<span class="number">0</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) * x[j, <span class="number">0</span>] / m</span><br><span class="line">            loss[<span class="number">1</span>] = loss[<span class="number">1</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) / m</span><br><span class="line">        <span class="comment"># 更新 theta</span></span><br><span class="line">        theta[<span class="number">0</span>] = theta[<span class="number">0</span>] - learn_rate * loss[<span class="number">0</span>]</span><br><span class="line">        theta[<span class="number">1</span>] = theta[<span class="number">1</span>] - learn_rate * loss[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure>



<h3 id="小批量梯度下降-Mini-batch-gradient-descent-–MBGD"><a href="#小批量梯度下降-Mini-batch-gradient-descent-–MBGD" class="headerlink" title="小批量梯度下降(Mini-batch gradient descent)–MBGD"></a>小批量梯度下降(Mini-batch gradient descent)–MBGD</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mini_batch_gradient_descent</span>(<span class="params">x, y, learn_rate, epoches, mini_length</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 输入的x</span></span><br><span class="line"><span class="string">    :param y: 输入的y</span></span><br><span class="line"><span class="string">    :param learn_rate: 学习率</span></span><br><span class="line"><span class="string">    :param epoches: 迭代次数</span></span><br><span class="line"><span class="string">    :param mini_length: mini batch length</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 随机打乱----optional</span></span><br><span class="line">    theta = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>])</span><br><span class="line">    <span class="comment"># 随机打乱数据  ----optional</span></span><br><span class="line">    shufflle_data = np.column_stack((y, x))</span><br><span class="line">    np.random.shuffle(shufflle_data)</span><br><span class="line">    <span class="comment"># 然后随机取一些数据进行梯度优化， 比如取随机100条数据</span></span><br><span class="line">    y = shufflle_data[:, <span class="number">0</span>]</span><br><span class="line">    x = shufflle_data[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoches):</span><br><span class="line">        <span class="comment"># 0-min_length， mini_length+1  2mini_length, ....... 一小段，一小段距离用于一次优化迭代</span></span><br><span class="line">        loss = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(y), mini_length):</span><br><span class="line">            loss[<span class="number">0</span>] = loss[<span class="number">0</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) * x[j, <span class="number">0</span>] / mini_length</span><br><span class="line">            loss[<span class="number">1</span>] = loss[<span class="number">1</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) / mini_length</span><br><span class="line">        <span class="comment"># 更新 theta</span></span><br><span class="line">        theta[<span class="number">0</span>] = theta[<span class="number">0</span>] - learn_rate * loss[<span class="number">0</span>]</span><br><span class="line">        theta[<span class="number">1</span>] = theta[<span class="number">1</span>] - learn_rate * loss[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure>


<h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2017/9/8</span></span><br><span class="line"><span class="comment"># @Author  : ryanbing (legotime@qq.com)</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">rng = np.random.RandomState(<span class="number">1</span>)</span><br><span class="line">x = <span class="number">10</span> * rng.rand(<span class="number">500</span>)</span><br><span class="line">y = <span class="number">3</span> * x + <span class="number">2</span> + rng.randn(<span class="number">500</span>)</span><br><span class="line"><span class="comment"># plt.scatter(x, y)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"><span class="comment"># 找出 y = wx + b 中的w 和 b, 正确的应该是 w = 3, b = 2</span></span><br><span class="line"><span class="comment"># 我们在计算的时候其看成 y = WX 其中 W= [w, b], X = [x, 1].T</span></span><br><span class="line"><span class="comment"># 梯度下降(Batch gradient descent)--BGD</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_gradient_descent</span>(<span class="params">x, y, learn_rate, epoches</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x:  输入的x</span></span><br><span class="line"><span class="string">    :param y:  输入的y</span></span><br><span class="line"><span class="string">    :param learn_rate: 学习率</span></span><br><span class="line"><span class="string">    :param epoches: 迭代次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    start_time = datetime.datetime.now()</span><br><span class="line">    theta = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoches):</span><br><span class="line">        loss = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">        <span class="comment"># 全部的值带入，计算 梯度</span></span><br><span class="line">        m = len(y)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            loss[<span class="number">0</span>] = loss[<span class="number">0</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) * x[j, <span class="number">0</span>] / m</span><br><span class="line">            loss[<span class="number">1</span>] = loss[<span class="number">1</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) / m</span><br><span class="line">        <span class="comment"># 更新 theta</span></span><br><span class="line">        theta[<span class="number">0</span>] = theta[<span class="number">0</span>] - learn_rate * loss[<span class="number">0</span>]</span><br><span class="line">        theta[<span class="number">1</span>] = theta[<span class="number">1</span>] - learn_rate * loss[<span class="number">1</span>]</span><br><span class="line">    end_time = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">return</span> end_time - start_time, theta</span><br><span class="line"><span class="comment"># 这不是随机梯度，随机梯度是每迭代一次，数据就随机一次---但是这也是一种处理手段</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stochastic_gradient_descent_false</span>(<span class="params">x, y, learn_rate, epoches, stochastic_rate</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 输入的x</span></span><br><span class="line"><span class="string">    :param y: 输入的y</span></span><br><span class="line"><span class="string">    :param learn_rate: 学习率</span></span><br><span class="line"><span class="string">    :param epoches: 迭代次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    start_time = datetime.datetime.now()</span><br><span class="line">    shufflle_data = np.column_stack((y, x))</span><br><span class="line">    np.random.shuffle(shufflle_data)</span><br><span class="line">    stochastic_count = int(len(y) * stochastic_rate)</span><br><span class="line">    <span class="comment"># 然后随机取一些数据进行梯度优化， 比如取随机100条数据</span></span><br><span class="line">    y = shufflle_data[:stochastic_count, <span class="number">0</span>]</span><br><span class="line">    x = shufflle_data[:stochastic_count, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    end_time = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">return</span> end_time - start_time, batch_gradient_descent(x, y, learn_rate, epoches)</span><br><span class="line"><span class="comment"># 正确的随机梯度应该是这样</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stochastic_gradient_descent_true</span>(<span class="params">x, y, learn_rate, epoches, stochastic_rate</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 输入的x</span></span><br><span class="line"><span class="string">    :param y: 输入的y</span></span><br><span class="line"><span class="string">    :param learn_rate: 学习率</span></span><br><span class="line"><span class="string">    :param epoches: 迭代次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    start_time = datetime.datetime.now()</span><br><span class="line">    theta = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoches):</span><br><span class="line">        shufflle_data = np.column_stack((y, x))</span><br><span class="line">        np.random.shuffle(shufflle_data)</span><br><span class="line">        stochastic_count = int(len(y) * stochastic_rate)</span><br><span class="line">        <span class="comment"># 然后随机取一些数据进行梯度优化， 比如取随机100条数据</span></span><br><span class="line">        y = shufflle_data[:stochastic_count, <span class="number">0</span>]</span><br><span class="line">        x = shufflle_data[:stochastic_count, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">        <span class="comment"># 随机之后的值，进行梯度计算</span></span><br><span class="line">        loss = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">        m = len(y)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            loss[<span class="number">0</span>] = loss[<span class="number">0</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) * x[j, <span class="number">0</span>] / m</span><br><span class="line">            loss[<span class="number">1</span>] = loss[<span class="number">1</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) / m</span><br><span class="line">        <span class="comment"># 更新 theta</span></span><br><span class="line">        theta[<span class="number">0</span>] = theta[<span class="number">0</span>] - learn_rate * loss[<span class="number">0</span>]</span><br><span class="line">        theta[<span class="number">1</span>] = theta[<span class="number">1</span>] - learn_rate * loss[<span class="number">1</span>]</span><br><span class="line">    end_time = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">return</span> end_time - start_time, theta</span><br><span class="line"><span class="comment"># 小批量梯度下降(Mini-batch gradient descent)--MBGD</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mini_batch_gradient_descent</span>(<span class="params">x, y, learn_rate, epoches, mini_length</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 输入的x</span></span><br><span class="line"><span class="string">    :param y: 输入的y</span></span><br><span class="line"><span class="string">    :param learn_rate: 学习率</span></span><br><span class="line"><span class="string">    :param epoches: 迭代次数</span></span><br><span class="line"><span class="string">    :param mini_length: mini batch length</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    start_time = datetime.datetime.now()</span><br><span class="line">    <span class="comment"># 随机打乱----optional</span></span><br><span class="line">    theta = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>])</span><br><span class="line">    <span class="comment"># 随机打乱数据  ----optional</span></span><br><span class="line">    shufflle_data = np.column_stack((y, x))</span><br><span class="line">    np.random.shuffle(shufflle_data)</span><br><span class="line">    <span class="comment"># 然后随机取一些数据进行梯度优化， 比如取随机100条数据</span></span><br><span class="line">    y = shufflle_data[:, <span class="number">0</span>]</span><br><span class="line">    x = shufflle_data[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoches):</span><br><span class="line">        <span class="comment"># 0-min_length， mini_length+1  2mini_length, ....... 一小段，一小段距离用于一次优化迭代</span></span><br><span class="line">        loss = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(y), mini_length):</span><br><span class="line">            loss[<span class="number">0</span>] = loss[<span class="number">0</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) * x[j, <span class="number">0</span>] / mini_length</span><br><span class="line">            loss[<span class="number">1</span>] = loss[<span class="number">1</span>] + (theta[<span class="number">0</span>] * x[j, <span class="number">0</span>] + theta[<span class="number">1</span>] * x[j, <span class="number">1</span>] - y[j]) / mini_length</span><br><span class="line">        <span class="comment"># 更新 theta</span></span><br><span class="line">        theta[<span class="number">0</span>] = theta[<span class="number">0</span>] - learn_rate * loss[<span class="number">0</span>]</span><br><span class="line">        theta[<span class="number">1</span>] = theta[<span class="number">1</span>] - learn_rate * loss[<span class="number">1</span>]</span><br><span class="line">    end_time = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">return</span> end_time - start_time, theta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contro_func</span>(<span class="params">func, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param func: 函数</span></span><br><span class="line"><span class="string">    :param kwargs:  func 中需要的参数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    x = kwargs.get(<span class="string">&#x27;x&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    y = kwargs.get(<span class="string">&#x27;y&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    learn_rate = kwargs.get(<span class="string">&#x27;learn_rate&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    epoches = kwargs.get(<span class="string">&#x27;epoches&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    stochastic_rate = kwargs.get(<span class="string">&#x27;stochastic_rate&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    mini_length = kwargs.get(<span class="string">&#x27;mini_length&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># change the value is args is not num</span></span><br><span class="line">    <span class="keyword">if</span> stochastic_rate <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> func(x, y, learn_rate, epoches, stochastic_rate)</span><br><span class="line">    <span class="keyword">if</span> mini_length <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> func(x, y, learn_rate, epoches, mini_length)</span><br><span class="line">    <span class="keyword">return</span> func(x, y, learn_rate, epoches)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_trend</span>():</span></span><br><span class="line">    <span class="comment"># 画出收敛的的图像和收敛对应的时间</span></span><br><span class="line">    rng = np.random.RandomState(<span class="number">1</span>)</span><br><span class="line">    x = <span class="number">10</span> * rng.rand(<span class="number">500</span>)</span><br><span class="line">    x = np.array([x, np.ones(<span class="number">500</span>)]).T</span><br><span class="line">    y = <span class="number">3</span> * x + <span class="number">2</span> + rng.randn(<span class="number">500</span>)</span><br><span class="line">    learn_rate = <span class="number">0.01</span></span><br><span class="line">    stochastic_rate = <span class="number">0.4</span></span><br><span class="line">    mini_length = <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [batch_gradient_descent, stochastic_gradient_descent_false,</span><br><span class="line">              stochastic_gradient_descent_true, mini_batch_gradient_descent]:</span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> epoches <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>, <span class="number">100000</span>]:</span><br><span class="line">            tmp.append(contro_func(i, x=x, y=y, learn_rate=learn_rate, stochastic_rate=stochastic_rate,</span><br><span class="line">                                   mini_length=mini_length, epoches=epoches))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># test(func=func, x=1, y=2, learn_rate=3, epoches=4, stochastic_rate=5)</span></span><br><span class="line">    <span class="comment"># print(batch_gradient_descent(np.array([x, np.ones(500)]).T, y, learn_rate=0.01, epoches=100000))</span></span><br><span class="line">    <span class="comment"># [ 1.14378512 0.17288215]</span></span><br><span class="line">    <span class="comment"># [ 3.18801281 0.50870366]</span></span><br><span class="line">    <span class="comment"># [ 3.18602557 0.806018 ]</span></span><br><span class="line">    <span class="comment"># [ 3.03276102 1.84267445]</span></span><br><span class="line">    <span class="comment"># [ 3.01449298 1.96623647]</span></span><br><span class="line">    <span class="comment"># [ 3.01449298 1.96623647]</span></span><br><span class="line">    <span class="comment"># print(stochastic_gradient_descent_false(np.array([x, np.ones(500)]).T, y, learn_rate=0.01, epoches=100,stochastic_rate=0.4))</span></span><br><span class="line">    <span class="comment"># [ 1.11939055 0.16949282]</span></span><br><span class="line">    <span class="comment"># [ 3.19877639 0.50404936]</span></span><br><span class="line">    <span class="comment"># [ 3.20921332 0.78698163]</span></span><br><span class="line">    <span class="comment"># [ 3.04720128 1.82412805]</span></span><br><span class="line">    <span class="comment"># [ 3.01920995 1.89883629]</span></span><br><span class="line">    <span class="comment"># [ 2.98281143 2.15226071]</span></span><br><span class="line">    <span class="comment"># print(stochastic_gradient_descent_true(np.array([x, np.ones(50000)]).T, y, learn_rate=0.01, epoches=1000,stochastic_rate=1))</span></span><br><span class="line">    <span class="comment"># print(mini_batch_gradient_descent(np.array([x, np.ones(500)]).T, y, learn_rate=0.01, epoches=100, mini_length=10))</span></span><br><span class="line">    <span class="comment"># [ 0.94630842  0.14845568]</span></span><br><span class="line">    <span class="comment"># [ 0.8811451   0.15444328]</span></span><br><span class="line">    <span class="comment"># [ 3.18337012  0.51049921]</span></span><br><span class="line">    <span class="comment"># [ 3.14833317  0.79174635]</span></span><br><span class="line">    <span class="comment"># [ 3.03507147  1.87931184]</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
</search>
